import { n as ShikiInternal, c as CodeToThemedTokensOptions, T as ThemedToken, C as CodeToHastOptions, D as ShikijiTransformerContextCommon, R as Root, d as CodeToTokensWithThemesOptions, e as ThemedTokenWithVariants } from './types/langs.mjs';
export { A as AnsiLanguage, g as Awaitable, B as BuiltinLanguage, a as BuiltinTheme, p as BundledHighlighterOptions, v as CodeOptionsMeta, t as CodeOptionsMultipleThemes, s as CodeOptionsSingleTheme, u as CodeOptionsThemes, r as CodeToHastOptionsCommon, F as FontStyle, I as Grammar, o as HighlighterCoreOptions, H as HighlighterGeneric, K as HtmlRendererOptions, J as HtmlRendererOptionsCommon, I as IGrammar, f as IRawGrammar, L as LanguageInput, q as LanguageRegistration, i as MaybeArray, M as MaybeGetter, h as MaybeModule, P as PlainTextLanguage, f as RawGrammar, b as RequireKeys, m as ResolveBundleKey, G as ShikijiTransformer, E as ShikijiTransformerContext, z as ShikijiTransformerContextMeta, S as SpecialLanguage, k as StringLiteralUnion, j as ThemeInput, y as ThemeRegistration, x as ThemeRegistrationRaw, O as ThemedTokenExplanation, N as ThemedTokenScopeExplanation, Q as TokenBase, U as TokenStyles, w as TransformerOptions, l as loadWasm } from './types/langs.mjs';
export { G as GetHighlighterFactory, H as HighlighterCore, j as addClassToHast, e as createSingletonShorthands, d as createdBundledHighlighter, c as getHighlighterCore, a as getShikiContext, g as getShikiInternal, i as isPlaintext, h as isSpecialLang, f as toArray, b as toShikiTheme, t as tokenizeAnsiWithTheme } from './types/normalize.mjs';

declare function codeToThemedTokens(internal: ShikiInternal, code: string, options?: CodeToThemedTokensOptions): ThemedToken[][];

declare function codeToHast(internal: ShikiInternal, code: string, options: CodeToHastOptions, transformerContext?: ShikijiTransformerContextCommon): Root;

/**
 * Get highlighted code in HTML.
 */
declare function codeToHtml(internal: ShikiInternal, code: string, options: CodeToHastOptions): string;

/**
 * Get tokens with multiple themes
 */
declare function codeToTokensWithThemes(internal: ShikiInternal, code: string, options: CodeToTokensWithThemesOptions): ThemedTokenWithVariants[][];

export { CodeToHastOptions, CodeToThemedTokensOptions, CodeToTokensWithThemesOptions, ShikiInternal, ShikijiTransformerContextCommon, ThemedToken, ThemedTokenWithVariants, codeToHast, codeToHtml, codeToThemedTokens, codeToTokensWithThemes };
