import{_ as l,o as i,c as a,R as e}from"./chunks/framework.mPPLtEmG.js";const m=JSON.parse('{"title":"经典老番 进程和线程","description":"","frontmatter":{},"headers":[],"relativePath":"network/process&thread.md","filePath":"network/process&thread.md"}'),r={name:"network/process&thread.md"},t=e('<h1 id="经典老番-进程和线程" tabindex="-1">经典老番 进程和线程 <a class="header-anchor" href="#经典老番-进程和线程" aria-label="Permalink to &quot;经典老番 进程和线程&quot;">​</a></h1><h2 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h2><p>一个进程基本就是一个程序的运行实例，进行中的程序 =》进程</p><ul><li>它代表了一整套程序运行的环境 <ul><li>程序运行的需要的一块内存</li><li>内存中存放代码，运行数据和执行任务的主线程</li></ul></li></ul><h2 id="进程与线程" tabindex="-1">进程与线程 <a class="header-anchor" href="#进程与线程" aria-label="Permalink to &quot;进程与线程&quot;">​</a></h2><ul><li>进程启动和管理线程</li><li>线程不能单独存在</li><li>进程中任意线程出错都会导致进程整体崩溃</li><li>线程共享进程数据</li><li>进程之间则相互隔离 <ul><li>单个崩溃不影响其他</li><li>但进程间沟通也需要专门的 IPC</li></ul></li><li>进程关闭/结束之后，所占用的内存会被操作系统回收 <ul><li>即使操作不当的内存泄露也会被回收</li></ul></li></ul><h2 id="比方式理解" tabindex="-1">比方式理解 <a class="header-anchor" href="#比方式理解" aria-label="Permalink to &quot;比方式理解&quot;">​</a></h2><ul><li>早期 linux 系统中进程的名字是 Job</li><li>线程的名字是 Work</li><li>很容易理解，一个岗位（Job）自然包括了很多具体的工作事务（Work）</li><li>比如说，一个开发，日常活动中占用时间精力最多的活动可能是和产品吵架以及和联调的前后端吵架</li></ul><h2 id="浏览器中的进程" tabindex="-1">浏览器中的进程 <a class="header-anchor" href="#浏览器中的进程" aria-label="Permalink to &quot;浏览器中的进程&quot;">​</a></h2><p>以 chrome 为例</p><ul><li>浏览器进程，也是主进程，显然也有一个主线程</li><li>渲染进程，排版引擎 Blink 和 JS 引擎 V8 都在这个进程中 <ul><li>每个 tab 页面都有一个渲染进程</li><li>看 chrome 自己的统计，一般都有一个备用渲染进程</li></ul></li><li>GPU 进程，gpu 绘制的流程促使线程的独立</li><li>网络进程，过去也在主进程之后</li><li>插件进程，避免容易崩溃的插件影响浏览器</li><li>现在存储进程也很常见</li><li>chrome 会根据设备条件自动调整分割进程，不太行的设备就多合并</li></ul>',11),o=[t];function s(h,n,c,u,d,_){return i(),a("div",null,o)}const b=l(r,[["render",s]]);export{m as __pageData,b as default};
