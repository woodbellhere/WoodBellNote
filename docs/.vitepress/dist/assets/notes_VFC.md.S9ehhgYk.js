import{_ as t,o as e,c as o,R as a}from"./chunks/framework.OFllvWJp.js";const n="/WoodBellNote/assets/boxModel.VSfz5sTw.png",d="/WoodBellNote/assets/borderBox.EwXdTPla.png",i="/WoodBellNote/assets/boxType.nZX9gtvu.png",s="/WoodBellNote/assets/positionScheme.MctTpdRc.png",f=JSON.parse('{"title":"视觉格式化上下文","description":"","frontmatter":{},"headers":[],"relativePath":"notes/VFC.md","filePath":"notes/VFC.md"}'),r={name:"notes/VFC.md"},c=a('<h1 id="视觉格式化上下文" tabindex="-1">视觉格式化上下文 <a class="header-anchor" href="#视觉格式化上下文" aria-label="Permalink to &quot;视觉格式化上下文&quot;">​</a></h1><p>一套算法，用来计算盒以及渲染树种所有盒的布局，决定最终的页面布局</p><h2 id="盒的维度-尺寸-dimension-盒模型" tabindex="-1">盒的维度/尺寸/dimension 盒模型 <a class="header-anchor" href="#盒的维度-尺寸-dimension-盒模型" aria-label="Permalink to &quot;盒的维度/尺寸/dimension 盒模型&quot;">​</a></h2><p>主要是盒模型的四个属性以及两种不同和模型 <img src="'+n+'" alt="Box Model"> content-box 和 border-box 对于不同属性的加总/计算方式有所差异 <img src="'+d+'" alt="Border Box"></p><h2 id="box-type-页面上盒的不同类型-块-行-行内块" tabindex="-1">box type 页面上盒的不同类型 块，行 行内块 <a class="header-anchor" href="#box-type-页面上盒的不同类型-块-行-行内块" aria-label="Permalink to &quot;box type 页面上盒的不同类型 块，行 行内块&quot;">​</a></h2><table><thead><tr><th>盒类型</th><th>占据空间</th><th>上下分布</th><th>宽高</th><th>padding-margin</th></tr></thead><tbody><tr><td>block</td><td>占满父级宽度</td><td>依次垂直分布</td><td>有</td><td>正常</td></tr><tr><td>inline</td><td>只占 content</td><td>无换行</td><td>无宽高</td><td>无垂直方向值</td></tr><tr><td>inline-block</td><td>只占 content</td><td>无换行</td><td>有</td><td>正常</td></tr></tbody></table><p><img src="'+i+'" alt="Box Type"></p><h2 id="positioning-scheme-元素采取的浮动和定位" tabindex="-1">positioning scheme 元素采取的浮动和定位 <a class="header-anchor" href="#positioning-scheme-元素采取的浮动和定位" aria-label="Permalink to &quot;positioning scheme 元素采取的浮动和定位&quot;">​</a></h2><p>浮动影响周边元素 浮动的容器不会适应它的高度 绝对定位不影响周边元素 绝对定位通过手动指定来设置容器 <img src="'+s+'" alt="Position Scheme"></p><h2 id="stacking-contexts-元素所处的堆叠上下文" tabindex="-1">Stacking contexts 元素所处的堆叠上下文 <a class="header-anchor" href="#stacking-contexts-元素所处的堆叠上下文" aria-label="Permalink to &quot;Stacking contexts 元素所处的堆叠上下文&quot;">​</a></h2><p>这玩意视觉上理解起来很容易，但是看文档的设置也非常繁琐 暂时先记得 z-index 越大离人眼越近完事</p><h2 id="渲染树中的其他元素" tabindex="-1">渲染树中的其他元素 <a class="header-anchor" href="#渲染树中的其他元素" aria-label="Permalink to &quot;渲染树中的其他元素&quot;">​</a></h2><h2 id="视口尺寸-图片尺寸等" tabindex="-1">视口尺寸，图片尺寸等 <a class="header-anchor" href="#视口尺寸-图片尺寸等" aria-label="Permalink to &quot;视口尺寸，图片尺寸等&quot;">​</a></h2>',13),h=[c];function l(p,m,_,b,x,g){return e(),o("div",null,h)}const k=t(r,[["render",l]]);export{f as __pageData,k as default};
