import{_ as e,o as a,c as t,R as s}from"./chunks/framework.OFllvWJp.js";const o="/WoodBellNote/assets/valueResolve.Kt8GfF_y.png",f=JSON.parse('{"title":"css 的值解析规则","description":"","frontmatter":{},"headers":[],"relativePath":"notes/valueResolve.md","filePath":"notes/valueResolve.md"}'),l={name:"notes/valueResolve.md"},i=s('<h1 id="css-的值解析规则" tabindex="-1">css 的值解析规则 <a class="header-anchor" href="#css-的值解析规则" aria-label="Permalink to &quot;css 的值解析规则&quot;">​</a></h1><h2 id="基本说明" tabindex="-1">基本说明 <a class="header-anchor" href="#基本说明" aria-label="Permalink to &quot;基本说明&quot;">​</a></h2><p>所有属性其实都有默认值 浏览器自己指定一个 font-size，rem 参考这个值 所有相对值都会转换为 px font-size 设置中的比例和 em 都会参考父元素 font-size length/长度设置中的比例都会参考父元素的 width，em 则会参考当前的 font-szie</p><h2 id="值的写入-处理顺序" tabindex="-1">值的写入/处理顺序 <a class="header-anchor" href="#值的写入-处理顺序" aria-label="Permalink to &quot;值的写入/处理顺序&quot;">​</a></h2><p>1 书写时指定的值 2 层叠 cascaded 值处理冲突 浏览器一般设置 16px 的 font-szie 3 特异/具体/设定值 如果没有设定的层叠值，使用默认值/这一步基本是继承高发区 4 计算值 将相对值转换为绝对值 5 使用 used 值 基于布局的最后计算结果 6 实际值 在浏览器限制下的使用值（比如有时候四舍五入）</p><h2 id="不同值的转换" tabindex="-1">不同值的转换 <a class="header-anchor" href="#不同值的转换" aria-label="Permalink to &quot;不同值的转换&quot;">​</a></h2><p>相对值单位如何转换为绝对值单位</p><ul><li>相对单位的参考对象是父元素</li><li>rem 和 em 都是参考 font 大小的</li><li>rem 参考根元素 font</li><li>em 参考父或现元素 font</li><li>vh 和 vw 基于浏览器视口</li></ul><p><img src="'+o+'" alt="valueResolve"></p>',9),n=[i];function r(c,d,_,h,p,m){return a(),t("div",null,n)}const v=e(l,[["render",r]]);export{f as __pageData,v as default};
