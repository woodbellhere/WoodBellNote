import{_ as e,o as a,c as t,R as o}from"./chunks/framework.OFllvWJp.js";const f=JSON.parse('{"title":"嵌入网页的内容（好像是微前端的前身？）","description":"","frontmatter":{},"headers":[],"relativePath":"notes/embed.md","filePath":"notes/embed.md"}'),r={name:"notes/embed.md"},i=o('<h1 id="嵌入网页的内容-好像是微前端的前身" tabindex="-1">嵌入网页的内容（好像是微前端的前身？） <a class="header-anchor" href="#嵌入网页的内容-好像是微前端的前身" aria-label="Permalink to &quot;嵌入网页的内容（好像是微前端的前身？）&quot;">​</a></h1><h2 id="iframe" tabindex="-1">iframe <a class="header-anchor" href="#iframe" aria-label="Permalink to &quot;iframe&quot;">​</a></h2><p>iframe 就是 inline frame，是另一个外部 html 文件/网页 地图 api 很多就是这么来的 有沙盒属性处理同源之类的安全问题 它本身有 sandbox 属性可以用，某种程度上规避安全问题 像什么 wujie，qiankun 就是这么来的</p><h2 id="object-和-embed" tabindex="-1">object 和 embed <a class="header-anchor" href="#object-和-embed" aria-label="Permalink to &quot;object 和 embed&quot;">​</a></h2><p>object 则是一种通用的外部资源 tag，和 embe 一样差不多是 flash 时代的前辈，基本都过时了 object 可以搞各种资源和花样 embed 只能放 plugin 插件 看文档更多是内网和企业项目用，本身就已经算 fallback 了</p><h2 id="video-cnavas-等等" tabindex="-1">video cnavas 等等 <a class="header-anchor" href="#video-cnavas-等等" aria-label="Permalink to &quot;video cnavas 等等&quot;">​</a></h2><p>这些也算是嵌入网页其他资源的方式</p>',7),n=[i];function d(c,s,l,m,h,_){return a(),t("div",null,n)}const p=e(r,[["render",d]]);export{f as __pageData,p as default};
