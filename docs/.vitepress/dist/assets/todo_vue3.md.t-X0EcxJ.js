import{_ as s,o as i,c as a,R as l}from"./chunks/framework.mPPLtEmG.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"todo/vue3.md","filePath":"todo/vue3.md"}'),t={name:"todo/vue3.md"},p=l(`<p>vue 与 vue 组件的核心思路</p><ul><li>模板 + 对象描述 + 数据 -&gt; 组件</li><li>输入数据到渲染组件的呈现和更新是声明式的，这个过程就算个技术核心</li></ul><p>组件渲染过程</p><ul><li><p>组件是对 DOM 树的抽象，dom 树的内容取决于你自己编写的内容</p></li><li><p>组件渲染为 DOM 的步骤</p><ul><li>创建 vnode</li><li>渲染 vonode</li><li>生成 DOM</li></ul></li><li><p>创建 vnode</p></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ensureRender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args);</span></span></code></pre></div><ul><li>ensureRender()基本用于创建一个渲染器对象</li></ul><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h2><ul><li>sentry 是一种错误日志收集工具</li><li>错误处理方法也需要注册，也有全局和局部两种方式</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  xxx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><p>三个参数分别是错误信息，vue 实例还有错误位置</p></li><li><p>错误处理也有基于组件树的前后捕获</p></li><li><p>子组件自己能处理就不会往上报错</p></li><li><p>主要通过 errorCaptured 这个生命周期钩子触发</p></li><li><p>在哪一级处理就在组件树哪一级设置钩子，钩子中如果 return false 就不会向上传播，该组件的钩子成为错误边界，所有错误都交给他处理</p></li><li><p>composables 组合式 api 的逻辑复用</p></li><li><p>在一组函数中将所有能写在 setup 函数中的相关内容写在一起</p></li><li><p>使用同一个 composeable 的组件是相互独立的</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">messages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">removeItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">removeMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useListData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]);</span></span></code></pre></div></li><li><p>watch 中的回调函数也要用 async 合适</p></li></ul>`,10),e=[p];function n(h,k,r,d,E,o){return i(),a("div",null,e)}const u=s(t,[["render",n]]);export{g as __pageData,u as default};
