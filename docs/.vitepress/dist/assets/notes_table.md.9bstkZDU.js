import{_ as a,o as e,c as t,R as o}from"./chunks/framework.OFllvWJp.js";const m=JSON.parse('{"title":"表格的一些注意点","description":"","frontmatter":{},"headers":[],"relativePath":"notes/table.md","filePath":"notes/table.md"}'),r={name:"notes/table.md"},n=o('<h1 id="表格的一些注意点" tabindex="-1">表格的一些注意点 <a class="header-anchor" href="#表格的一些注意点" aria-label="Permalink to &quot;表格的一些注意点&quot;">​</a></h1><h2 id="表自己的-布局" tabindex="-1">表自己的“布局” <a class="header-anchor" href="#表自己的-布局" aria-label="Permalink to &quot;表自己的“布局”&quot;">​</a></h2><p>colspan 和 rowspan 尽早建立 比如合并的一整列在第一个 row 中相应位置的 td 中就设置 合并的一整行就有余裕的多 不然自动对齐非常奇怪，我感觉它是</p><h2 id="表格塌陷" tabindex="-1">表格塌陷 <a class="header-anchor" href="#表格塌陷" aria-label="Permalink to &quot;表格塌陷&quot;">​</a></h2><p>Border-collapse 边距塌陷的，在表格之间挨得太近上非常有用 基本上相当于取消表格 cell 之间的多余的横竖线</p><h2 id="表格交替显示" tabindex="-1">表格交替显示 <a class="header-anchor" href="#表格交替显示" aria-label="Permalink to &quot;表格交替显示&quot;">​</a></h2><p>：nth-ofchild（odd/even）在表格行间交替显示颜色上有大用</p>',7),l=[n];function s(c,d,i,h,_,p){return e(),t("div",null,l)}const u=a(r,[["render",s]]);export{m as __pageData,u as default};
