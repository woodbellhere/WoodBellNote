import{_ as i,o as s,c as a,R as l}from"./chunks/framework.OFllvWJp.js";const c=JSON.parse('{"title":"vue 的状态管理","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vuex&pinia.md","filePath":"vue/vuex&pinia.md"}'),t={name:"vue/vuex&pinia.md"},n=l(`<h1 id="vue-的状态管理" tabindex="-1">vue 的状态管理 <a class="header-anchor" href="#vue-的状态管理" aria-label="Permalink to &quot;vue 的状态管理&quot;">​</a></h1><h2 id="动机" tabindex="-1">动机 <a class="header-anchor" href="#动机" aria-label="Permalink to &quot;动机&quot;">​</a></h2><ul><li>应用规模变大之后</li><li>props 传递和触发的链条会越来越长也越来越复杂</li><li>集中管理这些数据成为一种好的解决方式</li><li>这些被依赖的数据就是所谓状态</li></ul><h2 id="vuex-核心是一个-store" tabindex="-1">Vuex 核心是一个 store <a class="header-anchor" href="#vuex-核心是一个-store" aria-label="Permalink to &quot;Vuex 核心是一个 store&quot;">​</a></h2><ul><li>其中包含全局状态和修改状态的 mutation</li><li>组件通过触发 mutations 来修改状态</li><li>修改后所有使用状态的组件都会刷新</li></ul><h2 id="其他功能" tabindex="-1">其他功能 <a class="header-anchor" href="#其他功能" aria-label="Permalink to &quot;其他功能&quot;">​</a></h2><ul><li>异步操作 actions</li><li>计算属性风格的计算状态的 getters</li><li>分隔大型 store 的 module 模式</li></ul><h2 id="支持" tabindex="-1">支持 <a class="header-anchor" href="#支持" aria-label="Permalink to &quot;支持&quot;">​</a></h2><ul><li>插件扩展日志和持久化等</li><li>与 router 同步的插件等</li></ul><h2 id="slot-和状态管理" tabindex="-1">slot 和状态管理 <a class="header-anchor" href="#slot-和状态管理" aria-label="Permalink to &quot;slot 和状态管理&quot;">​</a></h2><ul><li>slots 也是一种铺平状态的方法</li><li>组件本身也有局部状态</li></ul><h2 id="定义-store-以设置状态" tabindex="-1">定义 store 以设置状态 <a class="header-anchor" href="#定义-store-以设置状态" aria-label="Permalink to &quot;定义 store 以设置状态&quot;">​</a></h2><ul><li>引入 createStore 来创建 store <ul><li>在其中定义 state（也相当于 data）</li><li>在 mutation 中定义更新事件，在组件中会通过 commit 触发</li></ul></li><li>再全局实例中 use 这一 store</li><li>在组件中通过 this.$store.xxx 来获取状态</li><li>在组件中通过 this.$store.commit(&#39;mehtodName&#39;)来触发状态更新</li></ul><h2 id="访问与获取状态" tabindex="-1">访问与获取状态 <a class="header-anchor" href="#访问与获取状态" aria-label="Permalink to &quot;访问与获取状态&quot;">​</a></h2><ul><li>vuex 已经将 store 注入到所有实例中</li><li>在组件中通行方式是定义计算属性来接状态</li><li>为了避免一个一个引入的麻烦，引入 mapState 作为计算属性 即可将全局状态映射到组件上</li><li>定义具体状态的方式有两种 <ul><li>一种 xxx: (state) =&gt; state.xxx</li><li>另一种 xxx : &#39;xxx&#39;</li></ul></li><li>另外还有一种数组式，请求的状态直接同名使用即可 <ul><li>mapState([&#39;xxx1&#39;, &#39;xxx2&#39;, &#39;xxx3&#39;])</li></ul></li><li>如果组件还有自定义计算属性，则使用扩展符将 mapState 的结果展开，然后正常定义自己的即可</li></ul><h2 id="触发更新状态" tabindex="-1">触发更新状态 <a class="header-anchor" href="#触发更新状态" aria-label="Permalink to &quot;触发更新状态&quot;">​</a></h2><ul><li><p>定义和触发状态更新的 mutation</p></li><li><p>vuex 中的 methods</p></li><li><p>主要是定义一个 increment(state) 函数，对状态正常操作即可</p></li><li><p>组件中可以通过 mapMutations 映射到组件上</p></li><li><p>mutation 也可以有第二个参数 payload， 主要就是向上传递的数据</p></li><li><p>payload 默认是对象，因而可以传递多个状态</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushToArr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state, payload) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    state.arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload.ele);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> @click=&quot;pushToArr({</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> ele:</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> arr.length</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> +</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 1</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> })&quot;&gt;追加元素&lt;/button&gt;</span></span></code></pre></div></li></ul><h2 id="计算属性性质的状态" tabindex="-1">计算属性性质的状态 <a class="header-anchor" href="#计算属性性质的状态" aria-label="Permalink to &quot;计算属性性质的状态&quot;">​</a></h2><ul><li>作为计算属性的 getters</li><li>思路就和 state 以及 mutation 差不多了</li><li>getter 如果返回函数就不缓存</li><li>也有 mapgetters</li><li>getters 也能调用其他 getters，写 sql 了是吧，传参的时候多加一个 getters，用的时候.语法就完事</li></ul><h2 id="异步状态操作" tabindex="-1">异步状态操作 <a class="header-anchor" href="#异步状态操作" aria-label="Permalink to &quot;异步状态操作&quot;">​</a></h2><ul><li>异步操作的 actions</li><li>整体和 mutation 类似</li><li>通过 dispatch 触发 mutations 来修改全局状态</li><li>参数 context 在内容上和当前实例一样，所以可以 context.commit，也可以解构语法{commit, dispatch(也是)} ,但和当前实例还就不是一个东西</li><li>别忘了嗷，commit 是触发 mutation 的，dispatch 是触发 action 的，但是 action 多半要触发 mutation</li><li>在 actions 中也可以触发其他 actions</li><li>组件里自然也有 mapActions，替换了 this.$store.dispatch</li></ul><h2 id="同步和异步的状态区分的动机" tabindex="-1">同步和异步的状态区分的动机 <a class="header-anchor" href="#同步和异步的状态区分的动机" aria-label="Permalink to &quot;同步和异步的状态区分的动机&quot;">​</a></h2><ul><li>为什么区分同步异步的 mutation 和 action？</li><li>mutations 不会等待异步函数执行，vue 只追踪 mutation 函数本身的执行，实际的状态应该是按时间戳检查的</li><li>action 则一定等计时器完成才执行 mutation，状态变化就是清除的</li></ul><h2 id="有状态管理工具的情况下的表单状态管理" tabindex="-1">有状态管理工具的情况下的表单状态管理 <a class="header-anchor" href="#有状态管理工具的情况下的表单状态管理" aria-label="Permalink to &quot;有状态管理工具的情况下的表单状态管理&quot;">​</a></h2><ul><li><p>表单与状态管理</p></li><li><p>一般来说在组件内管理就行，没必要搞全局状态</p></li><li><p>v-model 能够正常响应式修改值，但是 vuex 捕捉不到状态变化，因为 v-model 不触发 mutation</p></li><li><p>一种麻烦的法子是写个查改的 mutation（比如纯粹多余的 state[payload.field]），然后表单组件同时接住 state 和 mutation，接着再用手动 v-model 绑定住值就行</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  :value=&quot;user.username&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  @input=&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    updateUser({</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      field:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;username&#39;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      value:</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> $event.target.value,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    })</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">computed: mapState([&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">user&quot;]),</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> methods:</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> mapMutations([&quot;updateUser&quot;]),</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;!--</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> main.js</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> --&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">mutations:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state, payload) { state.user[payload.field] =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">payload.value; }, },</span></span></code></pre></div></li><li><p>由于过于麻烦，另一种办法是用 gettet 和 setter 完事</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.user.username; },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ field: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapMutations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;updateUser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 组件 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div></li><li><p>可以看到，就是用计算属性的 getter 和 setter 再包一层，读就代替读，写就代替触发 mutation</p></li><li><p>目前似乎没有特别好的办法，大家都本地化？</p></li><li><p>还可以炫一下函数式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gender&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;occupation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    obj[field] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.user[field];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ field, value });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, {}),</span></span></code></pre></div></li></ul><h2 id="状态管理中的模块化" tabindex="-1">状态管理中的模块化 <a class="header-anchor" href="#状态管理中的模块化" aria-label="Permalink to &quot;状态管理中的模块化&quot;">​</a></h2><h3 id="模块化的状态" tabindex="-1">模块化的状态 <a class="header-anchor" href="#模块化的状态" aria-label="Permalink to &quot;模块化的状态&quot;">​</a></h3><ul><li>module 是一个和 state 同等级的配置项</li><li>在不同文件中定义各自 store</li><li>在一个主 store 的 module 中引入这些分 store</li><li>vue 会在最后自动整合不同模块</li><li>没有命名空间的前提下，只分模块自己的局部状态和根节点代表的全部状态</li><li>getter 和 mutation 的第一个 state 参数指向子模块的局部状态</li><li>getter 的第二个 getter 指向根节点 getters</li><li>getter 的第三个 rootState 参数指向根节点 state</li><li>action 的第一个 state 参数依然指向局部状态， 第三个 rootState 指向根节点状态</li><li>action 的 commit 指向根节点的 mutation</li><li>action 的 dispatch 触发根节点的 actions</li><li>action 的 getters 指向根节点 getters</li><li>反正记得试试加个 root</li></ul><h3 id="模块中的命名空间" tabindex="-1">模块中的命名空间 <a class="header-anchor" href="#模块中的命名空间" aria-label="Permalink to &quot;模块中的命名空间&quot;">​</a></h3><ul><li>一大起因是命名冲突</li><li>可以给子模块加命名空间 namespaced:true，之后触发 mutation 或 action 时需要加上子 store 的名字</li><li>如果又想在有命名空间的组件中定义全局的状态，那就传的时候改成对象，其中多个 root：true 属性<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">actions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  addBlogGlobal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ commit }, payload) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;addBlog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, payload);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li>在组件中引入的时候，要么像路由那么用加个斜杠完事，要么额外加一组 mapxxx 啥的，第一个参数传子 store 名，后面正常按数组传</li><li>记得 getter，mutation 这些全都要被命名空间影响, 不带命名空间就不用管</li></ul><h3 id="文件划分方式" tabindex="-1">文件划分方式 <a class="header-anchor" href="#文件划分方式" aria-label="Permalink to &quot;文件划分方式&quot;">​</a></h3><ul><li><p>module</p><ul><li>index.js</li><li>getters.js</li><li>mutations.js</li><li>actions.js</li><li>modules 如果子模块较小 <ul><li>子 store1 整个.js</li><li>子 store2 整个.js</li></ul></li><li>modules 如果子模块较大 <ul><li>重来一遍上一级的五个文件</li></ul></li></ul></li></ul><h2 id="状态工具插件" tabindex="-1">状态工具插件 <a class="header-anchor" href="#状态工具插件" aria-label="Permalink to &quot;状态工具插件&quot;">​</a></h2><ul><li>日志插件</li><li>plugins 配置项的:[createLogger()]</li></ul><h2 id="日志插件的配置参数" tabindex="-1">日志插件的配置参数 <a class="header-anchor" href="#日志插件的配置参数" aria-label="Permalink to &quot;日志插件的配置参数&quot;">​</a></h2><ul><li><p>collapsed 默认为 true，折叠</p></li><li><p>logActions 默认为 true， 打印 actions 日志</p></li><li><p>logMutations 默认为 true， 打印 mutations 日志</p></li><li><p>filter（mutation， stateBefore， stateAfter）日志过滤</p></li><li><p>actionFilter(action, state) action 日志过滤</p></li><li><p>transform(state) 转换/过滤状态日志格式</p></li><li><p>mutationTransform(mutation) 字面意思</p></li><li><p>actionTransform(action)也是</p></li><li><p>logger 自定义日志打印器，默认是 log</p></li><li><p>vue devtool 也能看 vuex，能手动调试状态变化</p></li></ul><h2 id="状态的本地化-持久化" tabindex="-1">状态的本地化/持久化 <a class="header-anchor" href="#状态的本地化-持久化" aria-label="Permalink to &quot;状态的本地化/持久化&quot;">​</a></h2><ul><li>状态同步与持久化思路</li><li>不用像日志插件一样加()</li><li>一种是页面即将刷新时写入 localStorage， 减少写入次数，增强性能</li><li>每次触发 mutation 就同步， 同步即时</li></ul><h2 id="pinia" tabindex="-1">pinia <a class="header-anchor" href="#pinia" aria-label="Permalink to &quot;pinia&quot;">​</a></h2><ul><li><p>vue3 以及 composition api 配合的状态库</p></li><li><p>mutations 被自动管理了，所以没有这部分了</p></li><li><p>同时也允许直接修改状态</p><ul><li>v-model 可以直接绑定 pinia 状态</li><li>vuex 必须要 commit</li></ul></li><li><p>store 本身是模块化的，不用命名空间</p></li><li><p>store 内部的风格跟 setup 差不多，定义并到处一个 useXXXstore 函数，定义好了内部要 return</p></li><li><p>在组件中使用时用变量接住这个 useXXXstore()就可以，取值的时候 变量名.xxx 完事</p></li><li><p>通过$patch 同时修改多个状态</p><ul><li>基本上就是把要通过 store.xxx++ 和 store.yyy-- 放到一起</li><li>变成 store$patch({xxx++, yyy--})</li></ul></li><li><p>actions 复用状态修改逻辑</p></li><li><p>定义在 store 里</p></li><li><p>在组件触发</p></li><li><p>直观上看比用$patch 省事的多</p></li><li><p>改异步直接加 async 完事，不用多余配置</p></li><li><p>多个 store</p></li><li><p>跟单个 store 没什么区别，直接用完事</p></li><li><p>组件和组件之间也直接 变量接 usexxxstore 完事</p></li><li><p>pinia 中使用插件</p></li><li><p>就是生成 pinia 实例 xxx</p></li><li><p>然后 xxx.use(xxx)完事</p></li><li><p>ts 和 pinia</p></li><li><p>基本上只有 ref 里没有初始值的时候才需要明确指定类型</p></li><li><p>其他情况下都能自动推断</p></li></ul>`,40),e=[n];function h(p,k,r,o,d,E){return s(),a("div",null,e)}const g=i(t,[["render",h]]);export{c as __pageData,g as default};
