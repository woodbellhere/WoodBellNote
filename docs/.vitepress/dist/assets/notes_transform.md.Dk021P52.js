import{_ as a,o as e,c as t,R as r}from"./chunks/framework.mPPLtEmG.js";const o="/WoodBellNote/assets/transformMatrix.jdx9z0S9.png",x=JSON.parse('{"title":"transform 的基本内容","description":"","frontmatter":{},"headers":[],"relativePath":"notes/transform.md","filePath":"notes/transform.md"}'),s={name:"notes/transform.md"},n=r('<h1 id="transform-的基本内容" tabindex="-1">transform 的基本内容 <a class="header-anchor" href="#transform-的基本内容" aria-label="Permalink to &quot;transform 的基本内容&quot;">​</a></h1><h2 id="适用范围" tabindex="-1">适用范围 <a class="header-anchor" href="#适用范围" aria-label="Permalink to &quot;适用范围&quot;">​</a></h2><p>Transform 对原子（纯）inline 元素，比如 span，不管用（再看看文档）</p><p>transform 执行顺序是有关的 多个执行顺序会覆盖，效果不是累加的 利用伪类可以 hack 累加效果</p><p>annimated 的效果则是累加的</p><h2 id="translate" tabindex="-1">Translate <a class="header-anchor" href="#translate" aria-label="Permalink to &quot;Translate&quot;">​</a></h2><p>参数有具体数值和比例两种，比例以元素自己的 size 为参照 translatez 没有比例 translate 最通用，想指定啥就是啥 translate3d 是一次性移动三个方向的语法糖，必须要三个参数</p><h2 id="scale" tabindex="-1">Scale <a class="header-anchor" href="#scale" aria-label="Permalink to &quot;Scale&quot;">​</a></h2><p>参数是作为缩放倍数的正实数 scale 通用缩放 scalez 在有旋转的情况下有用</p><h2 id="rotate" tabindex="-1">Rotate <a class="header-anchor" href="#rotate" aria-label="Permalink to &quot;Rotate&quot;">​</a></h2><p>参数为角度 同样注意 animated，指定大于 360° 的旋转会让动画转几圈 rotate3d 围绕一个指定的三维向量轴旋转，参数照此安排</p><h2 id="skew" tabindex="-1">Skew <a class="header-anchor" href="#skew" aria-label="Permalink to &quot;Skew&quot;">​</a></h2><p>扭曲元素角度,抓住元素的角，然后按照特定角度拉扯它 skew 接受 x，y 两个角度，运行似乎是所谓的[ax,ay] 按 tan（x/y）来确定扭曲的基向量</p><h2 id="perspective" tabindex="-1">Perspective <a class="header-anchor" href="#perspective" aria-label="Permalink to &quot;Perspective&quot;">​</a></h2><p>给予深度的视觉效果 最好写在 transform 的最前面 （现在用 perspective 属性多过函数）</p><h2 id="matrix" tabindex="-1">Matrix <a class="header-anchor" href="#matrix" aria-label="Permalink to &quot;Matrix&quot;">​</a></h2><p>参数一共六个值，思路是一个三维的齐次矩阵，六个值两两是第一，二和四列的值 matrix3d 一共十六个参数，也是一个三维的齐次矩阵，十六个值四四为一列 <img src="'+o+'" alt="Transform Matrix"></p>',17),i=[n];function l(c,h,d,p,m,f){return e(),t("div",null,i)}const u=a(s,[["render",l]]);export{x as __pageData,u as default};
