import{_ as e,o as a,c as i,R as l}from"./chunks/framework.mPPLtEmG.js";const p=JSON.parse('{"title":"网页设计的要点","description":"","frontmatter":{},"headers":[],"relativePath":"design/designPrinciple.md","filePath":"design/designPrinciple.md"}'),t={name:"design/designPrinciple.md"},r=l('<h1 id="网页设计的要点" tabindex="-1">网页设计的要点 <a class="header-anchor" href="#网页设计的要点" aria-label="Permalink to &quot;网页设计的要点&quot;">​</a></h1><h2 id="响应式设计" tabindex="-1">响应式设计 <a class="header-anchor" href="#响应式设计" aria-label="Permalink to &quot;响应式设计&quot;">​</a></h2><h2 id="可维护可伸缩的代码" tabindex="-1">可维护可伸缩的代码 <a class="header-anchor" href="#可维护可伸缩的代码" aria-label="Permalink to &quot;可维护可伸缩的代码&quot;">​</a></h2><h2 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h2><h2 id="思考-构建-架构三步模型" tabindex="-1">思考-构建-架构三步模型 <a class="header-anchor" href="#思考-构建-架构三步模型" aria-label="Permalink to &quot;思考-构建-架构三步模型&quot;">​</a></h2><h3 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h3><p>在写 css 时应该有的基本思维方式 组件驱动的设计</p><ul><li>组件也就是构成用户界面的模块式构建基块</li><li>通过布局把不同组件整合在一起</li><li>在不同项目间都能复用</li><li>组件的独立性让我们能随处使用它</li></ul><h3 id="构建" tabindex="-1">构建 <a class="header-anchor" href="#构建" aria-label="Permalink to &quot;构建&quot;">​</a></h3><p>即某种命名 css 规则的规范方式，但是 bem 也被好多人吐槽难用 BEM block element modifier</p><ul><li>block 指明某个组件可以自成一体</li><li>element 是 block 中无法自成一体的部分</li><li>比如 info 咯，description 咯</li><li>Modifier 指 block 或 element 的不同版本，主要是样式性的</li></ul><h3 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h3><p>即 css 项目的文件划分方式，不过这个有很多，以下仅列举一种 7-1 7 个不同的 css/预处理文件加一个入口汇总文件</p><ul><li>base/</li><li>Components/</li><li>layout/</li><li>pages/</li><li>themes/</li><li>abstracts/</li><li>Vendors</li></ul>',14),o=[r];function n(s,c,d,h,u,_){return a(),i("div",null,o)}const b=e(t,[["render",n]]);export{p as __pageData,b as default};
