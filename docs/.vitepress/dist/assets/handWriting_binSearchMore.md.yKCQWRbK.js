import{_ as s,o as i,c as a,R as n}from"./chunks/framework.mPPLtEmG.js";const o=JSON.parse('{"title":"二分搜索的大于小于和等于","description":"","frontmatter":{},"headers":[],"relativePath":"handWriting/binSearchMore.md","filePath":"handWriting/binSearchMore.md"}'),h={name:"handWriting/binSearchMore.md"},t=n(`<h1 id="二分搜索的大于小于和等于" tabindex="-1">二分搜索的大于小于和等于 <a class="header-anchor" href="#二分搜索的大于小于和等于" aria-label="Permalink to &quot;二分搜索的大于小于和等于&quot;">​</a></h1><h2 id="以大于等于-x-为基准情况" tabindex="-1">以大于等于 x 为基准情况 <a class="header-anchor" href="#以大于等于-x-为基准情况" aria-label="Permalink to &quot;以大于等于 x 为基准情况&quot;">​</a></h2><p>常见的说法就是第一个位置，经典题就是 leetcode 35</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findBound</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nums[mid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nums[mid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在循环结束后，左闭右开区间是空的，L和R相等,都是大于等于值，但也有一些琐碎结论，比如左边那个数肯定是小于值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 然后参数target+1的话，左边那个数就是小于target+1，也就是小于等于target自己了</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="大于-x-可以转化为-大于等于-x-1" tabindex="-1">大于 x 可以转化为 大于等于 x+1 <a class="header-anchor" href="#大于-x-可以转化为-大于等于-x-1" aria-label="Permalink to &quot;大于 x 可以转化为 大于等于 x+1&quot;">​</a></h2><p>这个其实也很直观，大于等于 x 的情况下，没有办法通过指定左移或者右移几个数来排除等于，比如要参数本身变化</p><h2 id="小于-x-可以转化为-大于等于-x-1-左边那个数" tabindex="-1">小于 x 可以转化为 (大于等于 x ) -1（左边那个数） <a class="header-anchor" href="#小于-x-可以转化为-大于等于-x-1-左边那个数" aria-label="Permalink to &quot;小于 x 可以转化为 (大于等于 x ) -1（左边那个数）&quot;">​</a></h2><p>leetcode 69 算数平方根就是典型例子</p><h2 id="小于等于-x-可以转化为-大于-x-1-左边那个数-也就是-大于等于-x-1-1" tabindex="-1">小于等于 x 可以转化为 (大于 x) -1（左边那个数），也就是(大于等于 x+1)-1 <a class="header-anchor" href="#小于等于-x-可以转化为-大于-x-1-左边那个数-也就是-大于等于-x-1-1" aria-label="Permalink to &quot;小于等于 x 可以转化为 (大于 x) -1（左边那个数），也就是(大于等于 x+1)-1&quot;">​</a></h2><p>这个常见的说法就是最后一个位置，这个非常直观 这个只需要稍微绕一步，解这种问题手头画个数列比划一下就很轻松 例题是 leetcode 34 的“最后一个位置”</p><h2 id="其实还有更简单的变体" tabindex="-1">其实还有更简单的变体 <a class="header-anchor" href="#其实还有更简单的变体" aria-label="Permalink to &quot;其实还有更简单的变体&quot;">​</a></h2><p>比如 leetcode 367，完全平放式 标准大于等于，最后判断 true false 完事</p>`,12),l=[t];function e(k,p,r,E,d,g){return i(),a("div",null,l)}const y=s(h,[["render",e]]);export{o as __pageData,y as default};
